package Game;

import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ASUS
 */
public class Board extends javax.swing.JFrame {

    /**
     * Creates new form Board
     */
    private Deck deck;
    private Hand hand1, hand2;
    private Side S1, S2;
    private int p1s = 0, p2s = 0;
    private int mc1 = 10, mc2 = 10;
    private int turn;
        
    private String p1 = null, p2 = null;
    
    
    public Board() {
        initComponents();
        deck = new Deck();
        
        for (int i=0;i<4;i++){
            if(i == 0){
                for (int j=0;j<10;j++){
                    Card card = new Event(0);
                    card.chanceSubclass();
                    card.chancePoint();
                    deck.addCard(0, card, j);
                }
            } else if (i == 1){
                for (int j=0;j<10;j++){
                    Card card = new Melee(1);
                    card.chanceSubclass();
                    card.chancePoint();
                    deck.addCard(1, card, j);
                }
            } else if (i == 2){
                for (int j=0;j<10;j++){
                    Card card = new Ranged(2);
                    card.chanceSubclass();
                    card.chancePoint();
                    deck.addCard(2, card, j);
                }
            } else if (i == 3){
                for (int j=0;j<10;j++){
                    Card card = new Siege(3);
                    card.chanceSubclass();
                    card.chancePoint();
                    deck.addCard(3, card, j);
                }
            }   
        }
        deck.shuffle();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        LP1Name = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        P1Cards = new javax.swing.JList<>();
        LP2Name = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        P2Cards = new javax.swing.JList<>();
        jSeparator1 = new javax.swing.JSeparator();
        LP1 = new javax.swing.JLabel();
        P1Melee = new javax.swing.JLabel();
        P1Ranged = new javax.swing.JLabel();
        P1Siege = new javax.swing.JLabel();
        LP2 = new javax.swing.JLabel();
        P1MScore = new javax.swing.JLabel();
        P1RScore = new javax.swing.JLabel();
        P1SScore = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        P2MScore = new javax.swing.JLabel();
        P2Melee = new javax.swing.JLabel();
        P2RScore = new javax.swing.JLabel();
        P2Ranged = new javax.swing.JLabel();
        P2SScore = new javax.swing.JLabel();
        P2Siege = new javax.swing.JLabel();
        P1Name = new javax.swing.JTextField();
        P2Name = new javax.swing.JTextField();
        P1Ready = new javax.swing.JButton();
        P2Ready = new javax.swing.JButton();
        Stats = new javax.swing.JLabel();
        GStat = new javax.swing.JLabel();
        LP1Cards = new javax.swing.JLabel();
        LP2Cards = new javax.swing.JLabel();
        P1Event = new javax.swing.JLabel();
        P2Event = new javax.swing.JLabel();
        P1Score = new javax.swing.JLabel();
        P2Score = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        LP1Name.setText("Input Player 1 Name");

        P1Cards.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                P1CardsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(P1Cards);

        LP2Name.setText("Input Player 2 Name");

        P2Cards.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                P2CardsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(P2Cards);

        LP1.setText("Player 1");

        P1Melee.setText("Melee");

        P1Ranged.setText("Ranged");

        P1Siege.setText("Siege");

        LP2.setText("Player 2");

        P1MScore.setText("0");

        P1RScore.setText("0");

        P1SScore.setText("0");

        P2MScore.setText("0");

        P2Melee.setText("Melee");

        P2RScore.setText("0");

        P2Ranged.setText("Ranged");

        P2SScore.setText("0");

        P2Siege.setText("Siege");

        P1Ready.setText("Ready");
        P1Ready.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P1ReadyActionPerformed(evt);
            }
        });

        P2Ready.setText("Ready");
        P2Ready.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P2ReadyActionPerformed(evt);
            }
        });

        Stats.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Stats.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        GStat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        LP2Cards.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        P1Event.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        P2Event.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        P1Score.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        P1Score.setText("0");

        P2Score.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        P2Score.setText("0");

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(P1Ready)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(P2Ready))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(LP1Name)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(P1Name, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                                .addComponent(P2MScore)
                                                .addGap(18, 18, 18)
                                                .addComponent(P2Melee))
                                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                                .addComponent(P2RScore)
                                                .addGap(18, 18, 18)
                                                .addComponent(P2Ranged))
                                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                                .addComponent(P2SScore)
                                                .addGap(18, 18, 18)
                                                .addComponent(P2Siege))
                                            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                                    .addComponent(LP2)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(P2Event))
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jInternalFrame1Layout.createSequentialGroup()
                                                    .addComponent(LP1)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(P1Event))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jInternalFrame1Layout.createSequentialGroup()
                                                    .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(P1MScore)
                                                        .addComponent(P1RScore)
                                                        .addComponent(P1SScore))
                                                    .addGap(20, 20, 20)
                                                    .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(P1Ranged)
                                                        .addComponent(P1Melee)
                                                        .addComponent(P1Siege)))
                                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(GStat)
                                        .addGap(8, 8, 8)
                                        .addComponent(Stats)
                                        .addGap(157, 157, 157)))))
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LP2Name)
                                    .addComponent(P2Name, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LP1Cards)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LP2Cards)
                .addContainerGap())
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(P1Score)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(P2Score)
                .addGap(71, 71, 71))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LP1Name)
                    .addComponent(LP2Name))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(P2Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(P1Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Stats)
                    .addComponent(GStat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(P1Ready)
                    .addComponent(P2Ready))
                .addGap(0, 0, 0)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(LP1Cards)
                        .addGap(0, 34, Short.MAX_VALUE)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LP1)
                                    .addComponent(P1Event))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(P1Melee)
                                    .addComponent(P1MScore))
                                .addGap(20, 20, 20)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(P1Ranged)
                                    .addComponent(P1RScore))
                                .addGap(20, 20, 20)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(P1Siege)
                                    .addComponent(P1SScore))
                                .addGap(25, 25, 25)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LP2)
                                    .addComponent(P2Event))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(P2MScore)
                                    .addComponent(P2Melee))
                                .addGap(20, 20, 20)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(P2RScore)
                                    .addComponent(P2Ranged))
                                .addGap(18, 18, 18)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(P2SScore)
                                    .addComponent(P2Siege)))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(P1Score)
                            .addComponent(P2Score))
                        .addGap(30, 30, 30))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(LP2Cards)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void P2ReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P2ReadyActionPerformed
        p2 = P2Name.getText();

        LP2.setText(p2);
        LP2Cards.setText(p2+"'s Cards");
        if (p1 == null){
            P2Ready.setEnabled(false);
            P1Cards.setEnabled(false); 
        } else if (p1 != null){
            P2Ready.setEnabled(false);
            GStat.setText(p1+ "'s Turn");
            P2Cards.setEnabled(false);
            P1Cards.setEnabled(true);
        }
        hand2 = new Hand(p2);
        for (int i=0;i<10;i++){
            hand2.setHand(deck.popCard(i), i);
        }
        DefaultListModel model = new DefaultListModel();
        for (int i =0;i<10;i++){
            model.addElement(hand2.getHand(i).getSubName()+":"+hand2.getHand(i).getPoint());
        }
        P2Cards.setModel(model);
        S2 = new Side(p2);
    }//GEN-LAST:event_P2ReadyActionPerformed

    private void P1ReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P1ReadyActionPerformed
        p1 = P1Name.getText();

        LP1.setText(p1);
        LP1Cards.setText(p1+"'s Cards");
        if (p2 == null){
            P1Ready.setEnabled(false);
            P1Cards.setEnabled(false); 
        } else if (p2 != null){
            P1Ready.setEnabled(false);
            GStat.setText(p1+ "'s Turn");
            P2Cards.setEnabled(false);
            P1Cards.setEnabled(true);
        }
        hand1 = new Hand(p1);
        for (int i=0;i<10;i++){
            hand1.setHand(deck.popCard(i), i);
        }
        DefaultListModel model = new DefaultListModel();
        for (int i =0;i<10;i++){
            model.addElement(hand1.getHand(i).getSubName()+":"+hand1.getHand(i).getPoint());
        }
        P1Cards.setModel(model);
        S1 = new Side(p1);
    }//GEN-LAST:event_P1ReadyActionPerformed
    
    
    private void P1CardsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_P1CardsMouseClicked
        if (turn < 12){
            S2.checkEvent();
            S1.checkEvent();
            if (evt.getClickCount() == 2){
                int idx = P1Cards.getSelectedIndex();
                Card c = hand1.takeCard(idx);
                
                S1.putCard(c);
                S1.setScore(c);
                S1.setTotScore();
                
                if (c.getType() == 0){
                    P1Event.setText(S1.displaySide(0));
                    P2Event.setText(S1.displaySide(0));
                    S2.putCard(c);
                    String m = S1.getScore(1) +"";
                    P1MScore.setText(m);
                
                    String r = S1.getScore(2) +"";
                    P1RScore.setText(r);
                
                    String s = S1.getScore(3) +"";
                    P1SScore.setText(s);
                
                    String p1s = (S1.getScore(1)+S1.getScore(2)+S1.getScore(3)) + "";
                } else if (c.getType() == 1){
                    P1Melee.setText(S1.displaySide(1));
                } else if (c.getType() == 2){
                    P1Ranged.setText(S1.displaySide(2)); 
                } else if (c.getType() == 3){
                    P1Siege.setText(S1.displaySide(3)); 
                }
                S2.checkEvent();
                S1.checkEvent();
                
                //score p1
                String m = S1.getScore(1) +"";
                P1MScore.setText(m);
                
                String r = S1.getScore(2) +"";
                P1RScore.setText(r);
                
                String s = S1.getScore(3) +"";
                P1SScore.setText(s);
                
                p1s = (S1.getScore(1)+S1.getScore(2)+S1.getScore(3));
                P1Score.setText(p1s+ "");
                
                //score p2
                m = S2.getScore(1) +"";
                P2MScore.setText(m);
                
                r = S2.getScore(2) +"";
                P2RScore.setText(r);
                
                s = S2.getScore(3) +"";
                P2SScore.setText(s);
                
                p2s = (S2.getScore(1)+S2.getScore(2)+S2.getScore(3));
                P2Score.setText(p2s+ "");
                
                mc1--;
                
                //update Player 1's Cards
                DefaultListModel model = new DefaultListModel();
                for (int i =0;i<mc1;i++){
                    model.addElement(hand1.getHand(i).getSubName()+":"+hand1.getHand(i).getPoint());
                }
                P1Cards.setModel(model);
                
                //Change Turn
                turn++;
                P2Cards.setEnabled(true); 
                P1Cards.setEnabled(false);
                GStat.setText(p2+ "'s Turn");
            }
        } else if (turn == 12){
            P1Cards.setEnabled(false);
            String win = "";
            if (p2s < p1s){
                win = p1;
            } else if (p1s < p2s){
                win = p2;
            } else if (p1s == p2s){
                win = "Draw";
            }
            int response = JOptionPane.showConfirmDialog(this, p1+"Wins \n Save Game to History?" ,"Quit Game",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(response == JOptionPane.YES_OPTION){
                try{
                    LocalDateTime date = LocalDateTime.now();
                    
                    Statement statement = (Statement)Connect.GetConnection().createStatement();
                    statement.executeUpdate("insert into history VALUES " + "('"  +date+ "','" + p1 + "','" + p1s + "','" + p2 + "','" + p2s + "','" + win + "')");
                    statement.close();
                    Start start = new Start();
                    start.setVisible(true); 
                    this.dispose();
                }catch (SQLException e){
                    JOptionPane.showMessageDialog(null, "Can't Save the game to History");
                }
            } else if(response == JOptionPane.NO_OPTION){
                Start start = new Start();
                start.setVisible(true); 
                this.dispose();
            }
        }
    }//GEN-LAST:event_P1CardsMouseClicked

    private void P2CardsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_P2CardsMouseClicked
        if (turn < 12){
            S2.checkEvent();
            S1.checkEvent();
            if (evt.getClickCount() == 2){
                int idx = P2Cards.getSelectedIndex();
                Card c = hand2.takeCard(idx);
                
                S2.putCard(c);
                S2.setScore(c);
                S2.setTotScore();
                
                if (c.getType() == 0){
                    P2Event.setText(S2.displaySide(0));
                    P1Event.setText(S2.displaySide(0));
                    S1.putCard(c);
                } else if (c.getType() == 1){
                    P2Melee.setText(S2.displaySide(1));
                } else if (c.getType() == 2){
                    P2Ranged.setText(S2.displaySide(2)); 
                } else if (c.getType() == 3){
                    P2Siege.setText(S2.displaySide(3)); 
                }
                S2.checkEvent();
                S1.checkEvent();
                
                //score p1
                String m = S1.getScore(1) +"";
                P1MScore.setText(m);
                
                String r = S1.getScore(2) +"";
                P1RScore.setText(r);
                
                String s = S1.getScore(3) +"";
                P1SScore.setText(s);
                
                p1s = (S1.getScore(1)+S1.getScore(2)+S1.getScore(3));
                P1Score.setText(p1s+ "");
                
                //score p2
                m = S2.getScore(1) +"";
                P2MScore.setText(m);
                
                r = S2.getScore(2) +"";
                P2RScore.setText(r);
                
                s = S2.getScore(3) +"";
                P2SScore.setText(s);
                
                p2s = (S2.getScore(1)+S2.getScore(2)+S2.getScore(3));
                P2Score.setText(p2s+ "");
                
                mc2--;
                turn++;
                
                DefaultListModel model = new DefaultListModel();
                for (int i =0;i<mc2;i++){
                    model.addElement(hand2.getHand(i).getSubName()+":"+hand2.getHand(i).getPoint());
                }
                P2Cards.setModel(model);
                P1Cards.setEnabled(true); 
                P2Cards.setEnabled(false); 
                System.out.print(turn);
                S2.checkEvent();
                S1.checkEvent();
                GStat.setText(p1+ "'s Turn");
            }
        } else if (turn == 12){
            P1Cards.setEnabled(false);
            String win = "";
            if (p2s < p1s){
                win = p1;
            } else if (p1s < p2s){
                win = p2;
            } else if (p1s == p2s){
                win = "Draw";
            }
            int response = JOptionPane.showConfirmDialog(this, p1+"Wins \n Save Game to History?" ,"Quit Game",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(response == JOptionPane.YES_OPTION){
                try{
                    LocalDateTime date = LocalDateTime.now();
                    
                    Statement statement = (Statement)Connect.GetConnection().createStatement();
                    statement.executeUpdate("insert into history VALUES " + " ('"  +date+ "','" + p1 + "','" + p1s + "','" + p2 + "','" + p2s + "','" + win + "')");
                    statement.close();
                    Start start = new Start();
                    start.setVisible(true); 
                    this.dispose();
                }catch (SQLException e){
                    JOptionPane.showMessageDialog(null, "Can't Save the game to History");
                }
            } else if(response == JOptionPane.NO_OPTION){
                Start start = new Start();
                start.setVisible(true); 
                this.dispose(); 
            }
        }
    }//GEN-LAST:event_P2CardsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Board().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GStat;
    private javax.swing.JLabel LP1;
    private javax.swing.JLabel LP1Cards;
    private javax.swing.JLabel LP1Name;
    private javax.swing.JLabel LP2;
    private javax.swing.JLabel LP2Cards;
    private javax.swing.JLabel LP2Name;
    private javax.swing.JList<String> P1Cards;
    private javax.swing.JLabel P1Event;
    private javax.swing.JLabel P1MScore;
    private javax.swing.JLabel P1Melee;
    private javax.swing.JTextField P1Name;
    private javax.swing.JLabel P1RScore;
    private javax.swing.JLabel P1Ranged;
    private javax.swing.JButton P1Ready;
    private javax.swing.JLabel P1SScore;
    private javax.swing.JLabel P1Score;
    private javax.swing.JLabel P1Siege;
    private javax.swing.JList<String> P2Cards;
    private javax.swing.JLabel P2Event;
    private javax.swing.JLabel P2MScore;
    private javax.swing.JLabel P2Melee;
    private javax.swing.JTextField P2Name;
    private javax.swing.JLabel P2RScore;
    private javax.swing.JLabel P2Ranged;
    private javax.swing.JButton P2Ready;
    private javax.swing.JLabel P2SScore;
    private javax.swing.JLabel P2Score;
    private javax.swing.JLabel P2Siege;
    private javax.swing.JLabel Stats;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
